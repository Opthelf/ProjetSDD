Bloc 1 :
    Liste des fonctions :

    /*List * initList();
    Cell * buildCell(char * ch);
    void insertFirst(List * L, Cell * C);
    char* ctos(Cell * c);
    char * ltos(List * L);
    Cell * listGet(List * L, int i);
    Cell * searchList(List * L, char * str);
    List * stol(char* s);
    void ltof(List * L,char * path);
    List * ftol(char * path);*/

    Tests :

    List * L1 = initList();
	Cell * C1 = buildCell("Chaine1");
	Cell * C2 = buildCell("Chaine2");
    Cell * C3 = buildCell("Chaine3");
	char * recup = ctos(C1);
    char * recupT = ltos(L1);
	Cell * C4 = listGet(L1,0);
    Cell * C5 = searchList(L1,"Chaine1");
	insertLast(L1,C1);
	insertLast(L1,C2);
    insertLast(L1,C3);
	
	List * L2 = stol("Je|suis|heureux");
	char * ltosL2=ltos(L2);
	printf("%s\n",ltosL2);
	ltof(L1,"TestLtof.txt");
	free(ltosL2);
	FreeList(L2);
	FreeList(L1);
	List * L3 = ftol("TestLtof.txt");
	FreeList(L3);


Bloc 2 :

    Liste des fonctions : 

    /*List * listdir(char * root_dir);
    int file_exists(char *file);
    void cp(char * to, char * from);
    char * hashToPath(char* hash);
    void blobFile(char * file);
    */

    Tests :

	file_exists ->
		int exists = file_exists("test.txt");
		printf("test.txt -> %d\n",exists);
		exists = file_exists("nexistepas.txt");
		printf("nexistepas.txt -> %d\n",exists);
		exists = file_exists("Test");
		printf("Test -> %d\n",exists);
		exists = file_exists("test");
		printf("test -> %d\n",exists);

	char cwd[50];
	List * L4 = listdir(".");
	char * ltosL4=ltos(L4);
	printf("%s\n",ltosL4);
	free(ltosL4);
	FreeList(L4);
	char * hash = sha256file("main.c");
	char * hashToP = hashToPath(hash);
	printf("%s\n",hashToP);
	free(hashToP);
	free(hash);
	cp("fichier2.txt","fichier1.txt");
	blobFile("exo1.c");



//Bloc 3 :

    Liste des fonctions :

    WorkFile* createWorkFile(char* name);
    char* wfts(WorkFile* wf);
    WorkFile* stwf(char* ch);
    WorkTree* initWorkTree();
    int inWorkTree(WorkTree* wt, char* name);
    int appendWorkTree(WorkTree* wt,char * n,char * h, int m);
    char* wtts(WorkTree* wt);
    WorkTree* stwt(char* ch);
    WorkTree * ftwt(char * file);
    int wttf(WorkTree* wt, char* file);


    Tests :

	WorkFile * WF1 = createWorkFile("main.txt"); 
	WF1->hash = sha256file(WF1->name);
	WF1->mode = 777;
	char * chaineWorkFile = wfts(WF1);
	//printf("%s\n",chaineWorkFile);
	WorkFile * WF2 = stwf(chaineWorkFile);
	char * chaineWorkFile2 = wfts(WF2);
	//printf("%s\n",chaineWorkFile2);
	freeWorkFile(WF1);
	freeWorkFile(WF2);
	free(chaineWorkFile);
	free(chaineWorkFile2);


	WorkTree * WT1 = initWorkTree();
	char *h1=sha256file("exo1.c");
	char *h2=sha256file("exo2.c");
	char *h3=sha256file("exo3.c");
	appendWorkTree(WT1,"exo1.c",h1,777);
	appendWorkTree(WT1,"exo2.c",h2,777);
	appendWorkTree(WT1,"exo3.c",h3,777);
	char * chaineWorkTree = wtts(WT1);
	WorkTree * WT2 = stwt(chaineWorkTree);
	char * chaineWorkTree2 = wtts(WT2);

	wttf(WT1,"test.txt");
	WorkTree * WT3 = ftwt("test.txt");
	char * chaineWorkTree3 = wtts(WT3);
	printf("%s\n",chaineWorkTree3);

	free(chaineWorkTree);
	free(chaineWorkTree3);
	free(chaineWorkTree2);
	free(h1);
	free(h2);
	free(h3);
	freeWorkTree(WT1);
	freeWorkTree(WT2);
	freeWorkTree(WT3);


//Bloc 4 :

    Liste des fonctions :

    /*int getChmod(const char * path);
    void setMode(int mode, char * path);
    char * hashToFile(char* hash);
    char * blobWorkTree(WorkTree *wt);
    int isFile(const char * path);
    char * saveWorkTree(WorkTree *wt,char * path);
    char * concat_paths(char * path1,char * path2);*/


    Tests : 

	char * h1 = sha256file("teste"); 
	char * h2 = sha256file("teste2");
	char * h3 = sha256file("ctest.c");
	char * h4 = sha256file("ctest2.c");
	WorkTree * WT= initWorkTree();
	appendWorkTree(WT,"teste",h1,777);
	appendWorkTree(WT,"teste2",h2,777);
	appendWorkTree(WT,"ctest.c",h3,777);
	appendWorkTree(WT,"ctest2.c",h4,777);
	afficheWT(WT);


	
	
	printf("isFile(\"teste\") = %d\n",isFile("teste"));
	printf("isFile(\"teste2\") = %d\n",isFile("teste2"));
	printf("isFile(\"ctest.c\") = %d\n",isFile("ctest.c"));	

	
	//char * save= saveWorkTree(WT,".");
	

	freeWorkTree(WT);
	//free(save);
	free(h1);
	free(h2);
	free(h3);
	free(h4);

	!!!Test pour restoreWorkTree!!! -> DEMANDE MOI AVANT C'EST PAS JUSTE ÇA :
	
	Pour tester restoreWorkTree ->
		- Créer un WorkTree avec les dossiers/fichiers que l'on veut sauvegarder
		- Sauvegarder le WorkTree et SE SOUVENIR DE SON HASH POUR LE RÉCUPÉRER PLUS TARD
		- Modifier les fichiers enregistrés, puis sauvegarder de nouveau le WorkTree
		- Récupérer le WorkTree correspondant à la première sauvegarde grâce à son hash et à la fonction ftwt
		- Restorer le WorkTree
		- On oublie pas de tester les modes des fichiers avant et après chaque appel de saveWorkTree et restoreWorkTree

	int mode = getChmod("Test/Dossier");
	printf("Mode de Dossier -> %d\n",mode);
	mode = getChmod("Test/Dossier/Dfichier1.txt");
	printf("Mode de Test/Dossier/Dfichier1.txt -> %d\n",mode);

	WorkTree * WT = initWorkTree();
	/*appendWorkTree(WT,"Test",NULL,getChmod("Test"));
	appendWorkTree(WT,"test.txt",NULL,getChmod("test.txt"));
	
	char * hashWT = saveWorkTree(WT,".");
	printf("hashWT -> %s\n",hashWT);*/
	WT = ftwt("ff/76bbfb3ef2e706a3d5b086426023b653a85887ef4cb359337f3b0b574fa386.t");
	restoreWorkTree(WT,".");


	mode = getChmod("Test/Dossier");
	printf("Mode de Dossier -> %d\n",mode);
	mode = getChmod("Test/Dossier/Dfichier1.txt");
	printf("Mode de Test/Dossier/Dfichier1.txt -> %d\n",mode);


	freeWorkTree(WT);
	//free(hashWT);


//Bloc 6 (ex6)
	Liste fonctions:
	kvp* createKeyVal(char *key,char *val);
	void freeKeyVal(kvp *kv);
	char * kvts(kvp* k);
	kvp * stkv(char* str);
	Commit* initCommit();
	void freeCommit(Commit *c);
	unsigned long hash(unsigned char *str);
	void commitSet(Commit *c,char *key,char *val);
	Commit* createCommit(char* hash);
	char * commitGet(Commit *c,char *key);
	char * cts(Commit *c);
	Commit* stc(char *str);
	void ctf(Commit *c,char *file);
	Commit* ftc(char *file);
	char * blobCommit(Commit *c);
	
	Tests:

	kvp * key = createKeyVal("key","value");
	char * ch = kvts(key);
	//printf("%s\n",ch);
	kvp * key2 = stkv(ch);
	char * ch2 = kvts(key2);
	//printf("%s\n",ch2);
	freeKeyVal(key2);
	freeKeyVal(key);
	free(ch);
	free(ch2);
	Commit * c = initCommit();
	
	commitSet(c,"key1","value1");
	commitSet(c,"key2","value2");
	
	Commit * c2 = createCommit("hash");
	char * val = commitGet(c,"key2");
	char * val2 = commitGet(c,"key1");
	//printf("%s\n",val);
	//printf("%s\n",val2);
	commitSet(c2,"key3","value3");
	commitSet(c2,"key4","value4");
	char * comtostr= cts(c2);
	//printf("%s\n",comtostr);
	Commit * c3 = stc(comtostr);
	char * ctsc3 = cts(c3);
	//printf("%s\n",ctsc3);
	ctf(c3,"testex6.txt");
	Commit * c4 =  ftc("testex6.txt");
	char *ctsc4 = cts(c4);
	printf("%s\n",ctsc4);
	char * hashc4 = blobCommit(c4);
	freeCommit(c4);
	free(ctsc4);
	free(comtostr);
	freeCommit(c2);
	freeCommit(c);
	free(ctsc3);
	freeCommit(c3);
	free(hashc4);


exo7 :

	Tests :

	FILE * f1 = fopen("Test/fichier1.txt","w");
	if (f1 == NULL){
		printf("Error %d \n", errno);
		return 0;
	}
	FILE * f2 = fopen("Test/fichier2.txt","w");
	if (f2 == NULL){
		printf("Error %d \n", errno);
		return 0;
	}
	fprintf(f1,"Premier fichier\n");
	fprintf(f2,"Deuxième fichier\n");
	fclose(f1);
	fclose(f2);

	WorkTree * WT1 = initWorkTree();
	appendWorkTree(WT1,"Test",NULL,getChmod("Test"));
	char * workTreeHash = saveWorkTree(WT1,".");

	Commit * c1 = initCommit();
	commitSet(c1,"author","Nino");
	commitSet(c1,"message","Sauvegarde Test");
	commitSet(c1,"tree",workTreeHash);
	commitSet(c1,"predecessor","null");

	initRefs();
	createUpdateRef("HEAD",commitGet(c1,"tree"));

	/*createUpdateRef("branche1",commitGet(c1,"tree"));
	deleteRef("branche1");*/

	/*char * hash = getRef("branche1");
	char * hash1 = getRef("HEAD");
	char * hash2 = getRef("master");
	printf("hash1 : %s\n",hash1);
	printf("hash2 : %s\n",hash2);
	free(hash);
	free(hash1);
	free(hash2);*/
	myGitAdd("exo7.c");
	myGitAdd("exo6.c");
	myGitCommit("Head","Test de myGitCommit");
	char * gr = getRef("HEAD");
	printf("gr : %s\n",gr);
	freeWorkTree(WT1);
	freeCommit(c1);
	free(workTreeHash);
	free(gr);
exo8 :

	Tests :

	initRefs();
	initBranch();
	printf("HEAeD : %d\n",branchExists("HEAeD"));
	printf("HEAD : %d\n",branchExists("HEAD"));
	myGitAdd("Test");
	myGitAdd("test.txt");
	myGitCommit("branche2",NULL);

	//createBranch("branche2");

	char * current_branch = getCurrentBranch();
	printf("current_branch -> %s\n",current_branch);
	free(current_branch);