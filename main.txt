Bloc 1 :
    Liste des fonctions :

    /*List * initList();
    Cell * buildCell(char * ch);
    void insertFirst(List * L, Cell * C);
    char* ctos(Cell * c);
    char * ltos(List * L);
    Cell * listGet(List * L, int i);
    Cell * searchList(List * L, char * str);
    List * stol(char* s);
    void ltof(List * L,char * path);
    List * ftol(char * path);*/

    Tests :

    List * L1 = initList();
	Cell * C1 = buildCell("Chaine1");
	Cell * C2 = buildCell("Chaine2");
    Cell * C3 = buildCell("Chaine3");
	char * recup = ctos(C1);
    char * recupT = ltos(L1);
	Cell * C4 = listGet(L1,0);
    Cell * C5 = searchList(L1,"Chaine1");
	insertLast(L1,C1);
	insertLast(L1,C2);
    insertLast(L1,C3);
	
	List * L2 = stol("Je|suis|heureux");
	char * ltosL2=ltos(L2);
	printf("%s\n",ltosL2);
	ltof(L1,"TestLtof.txt");
	free(ltosL2);
	FreeList(L2);
	FreeList(L1);
	List * L3 = ftol("TestLtof.txt");
	FreeList(L3);


Bloc 2 :

    Liste des fonctions : 

    /*List * listdir(char * root_dir);
    int file_exists(char *file);
    void cp(char * to, char * from);
    char * hashToPath(char* hash);
    void blobFile(char * file);
    */

    Tests :

	char cwd[50];
	List * L4 = listdir(".");
	char * ltosL4=ltos(L4);
	printf("%s\n",ltosL4);
	free(ltosL4);
	FreeList(L4);
	char * hashToP = hashToPath(sha256file("main.c"));
	printf("%s\n",hashToP);
	free(hashToP);
	cp("fichier2.txt","fichier1.txt");
	blobFile("exo1.c");


//Bloc 3 :

    Liste des fonctions :

    WorkFile* createWorkFile(char* name);
    char* wfts(WorkFile* wf);
    WorkFile* stwf(char* ch);
    WorkTree* initWorkTree();
    int inWorkTree(WorkTree* wt, char* name);
    int appendWorkTree(WorkTree* wt,char * n,char * h, int m);
    char* wtts(WorkTree* wt);
    WorkTree* stwt(char* ch);
    WorkTree * ftwt(char * file);
    int wttf(WorkTree* wt, char* file);


    Tests :

	WorkFile * WF1 = createWorkFile("main.txt"); 
	WF1->hash = sha256file(WF1->name);
	WF1->mode = 777;
	freeWorkFile(WF1);

	WorkTree * WT1 = initWorkTree();
	printf("%d\n",inWorkTree(WT1,"exo2.c"));

	appendWorkTree(WT1,"exo1.c",sha256file("exo1.c"),777);
	appendWorkTree(WT1,"exo2.c",sha256file("exo2.c"),777);
	appendWorkTree(WT1,"exo3.c",sha256file("exo3.c"),777);

	char * chaineWorkTree = wtts(WT1);
	printf("%s\n",chaineWorkTree);
	WorkTree* WT3 = stwt(chaineWorkTree);
	printf("%s",wtts(WT3));

	wttf(WT1,"fichier1.txt");
	WorkTree *WT4 = ftwt("fichier1.txt");
	printf("%s",wtts(WT4));
	
	freeWorkTree(WT1);

//Bloc 4 :

    Liste des fonctions :

    /*int getChmod(const char * path);
    void setMode(int mode, char * path);
    char * hashToFile(char* hash);
    char * blobWorkTree(WorkTree *wt);
    int isFile(const char * path);
    char * saveWorkTree(WorkTree *wt,char * path);
    char * concat_paths(char * path1,char * path2);*/


    Tests : 

	/*WorkTree * WT1 = initWorkTree();
	appendWorkTree(WT1,"Test",NULL,777);
	//printf("%d\n",WT1->tab[0].mode);
	//printf("%s\n",ltos(listdir("/Users/Nino/Documents/cours/2022-2023-s2/LU2IN006/Projet/ProjetSDD1/Test")));
	//printf("%d\n",getChmod("fichier1.txt"));
	//printf("%s\n",sha256file("exo1.c"));
	//printf("%s\n",hashToFile(sha256file("exo1.c")));
	//printf("%s\n",blobWorkTree(WT1));
	printf("%s\n",saveWorkTree(WT1,"."));*/