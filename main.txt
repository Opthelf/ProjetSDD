Bloc 1 :
    Liste des fonctions :

    /*List * initList();
    Cell * buildCell(char * ch);
    void insertFirst(List * L, Cell * C);
    char* ctos(Cell * c);
    char * ltos(List * L);
    Cell * listGet(List * L, int i);
    Cell * searchList(List * L, char * str);
    List * stol(char* s);
    void ltof(List * L,char * path);
    List * ftol(char * path);*/

    Tests :

    List * L1 = initList();
	Cell * C1 = buildCell("Chaine1");
	Cell * C2 = buildCell("Chaine2");
    Cell * C3 = buildCell("Chaine3");
	char * recup = ctos(C1);
    char * recupT = ltos(L1);
	Cell * C4 = listGet(L1,0);
    Cell * C5 = searchList(L1,"Chaine1");
	insertLast(L1,C1);
	insertLast(L1,C2);
    insertLast(L1,C3);
	
	List * L2 = stol("Je|suis|heureux");
	char * ltosL2=ltos(L2);
	printf("%s\n",ltosL2);
	ltof(L1,"TestLtof.txt");
	free(ltosL2);
	FreeList(L2);
	FreeList(L1);
	List * L3 = ftol("TestLtof.txt");
	FreeList(L3);


Bloc 2 :

    Liste des fonctions : 

    /*List * listdir(char * root_dir);
    int file_exists(char *file);
    void cp(char * to, char * from);
    char * hashToPath(char* hash);
    void blobFile(char * file);
    */

    Tests :

	char cwd[50];
	List * L4 = listdir(".");
	char * ltosL4=ltos(L4);
	printf("%s\n",ltosL4);
	free(ltosL4);
	FreeList(L4);
	char * hash = sha256file("main.c");
	char * hashToP = hashToPath(hash);
	printf("%s\n",hashToP);
	free(hashToP);
	free(hash);
	cp("fichier2.txt","fichier1.txt");
	blobFile("exo1.c");



//Bloc 3 :

    Liste des fonctions :

    WorkFile* createWorkFile(char* name);
    char* wfts(WorkFile* wf);
    WorkFile* stwf(char* ch);
    WorkTree* initWorkTree();
    int inWorkTree(WorkTree* wt, char* name);
    int appendWorkTree(WorkTree* wt,char * n,char * h, int m);
    char* wtts(WorkTree* wt);
    WorkTree* stwt(char* ch);
    WorkTree * ftwt(char * file);
    int wttf(WorkTree* wt, char* file);


    Tests :

	WorkFile * WF1 = createWorkFile("main.txt"); 
	WF1->hash = sha256file(WF1->name);
	WF1->mode = 777;
	freeWorkFile(WF1);

	WorkTree * WT1 = initWorkTree();
	printf("%d\n",inWorkTree(WT1,"exo2.c"));

	appendWorkTree(WT1,"exo1.c",sha256file("exo1.c"),777);
	appendWorkTree(WT1,"exo2.c",sha256file("exo2.c"),777);
	appendWorkTree(WT1,"exo3.c",sha256file("exo3.c"),777);

	char * chaineWorkTree = wtts(WT1);
	printf("%s\n",chaineWorkTree);
	WorkTree* WT3 = stwt(chaineWorkTree);
	printf("%s",wtts(WT3));

	wttf(WT1,"fichier1.txt");
	WorkTree *WT4 = ftwt("fichier1.txt");
	printf("%s",wtts(WT4));
	
	freeWorkTree(WT1);

//Bloc 4 :

    Liste des fonctions :

    /*int getChmod(const char * path);
    void setMode(int mode, char * path);
    char * hashToFile(char* hash);
    char * blobWorkTree(WorkTree *wt);
    int isFile(const char * path);
    char * saveWorkTree(WorkTree *wt,char * path);
    char * concat_paths(char * path1,char * path2);*/


    Tests : 

	FILE * f1 = fopen("Test/fichier1.txt","w");
	if (f1 == NULL){
		printf("Error %d \n", errno);
		return 0;
	}
	FILE * f2 = fopen("Test/fichier2.txt","w");
	fprintf(f1,"Premier fichier\n");
	fprintf(f2,"Deuxi√®me fichier\n");

	fclose(f1);
	fclose(f2);

	WorkTree * WT1 = initWorkTree();
	appendWorkTree(WT1,"Test",NULL,0777);
	WT1 = ftwt(strcat(hashToPath(saveWorkTree(WT1,".")),".t"));

	f1 = fopen("Test/fichier1.txt","w");
	f2 = fopen("Test/fichier2.txt","w");
	if (f1 == NULL){
		printf("Error %d \n", errno);
		return 0;
	}
	fprintf(f1,"fichier 1 - v2.0\n");
	fprintf(f2,"fichier 2 - v2.0\n");
	fclose(f1);
	fclose(f2);

	WorkTree * WT2 = initWorkTree();
	appendWorkTree(WT2,"Test",NULL,0777);
	WT2 = ftwt(strcat(hashToPath(saveWorkTree(WT2,".")),".t"));

	f1 = fopen("Test/fichier1.txt","w");
	f2 = fopen("Test/fichier2.txt","w");
	if (f1 == NULL){
		printf("Error %d \n", errno);
		return 0;
	}
	fprintf(f1,"fichier 1 - v3.0\n");
	fprintf(f2,"fichier 2 - v3.0\n");
	fclose(f1);
	fclose(f2);

	WorkTree * WT3 = initWorkTree();
	appendWorkTree(WT3,"Test",NULL,0777);
	WT3 = ftwt(strcat(hashToPath(saveWorkTree(WT3,".")),".t"));
	restoreWorkTree(WT2,".");



//Bloc 6 (ex6)
	Liste fonctions:
	kvp* createKeyVal(char *key,char *val);
	void freeKeyVal(kvp *kv);
	char * kvts(kvp* k);
	kvp * stkv(char* str);
	Commit* initCommit();
	void freeCommit(Commit *c);
	unsigned long hash(unsigned char *str);
	void commitSet(Commit *c,char *key,char *val);
	Commit* createCommit(char* hash);
	char * commitGet(Commit *c,char *key);
	char * cts(Commit *c);
	Commit* stc(char *str);
	void ctf(Commit *c,char *file);
	Commit* ftc(char *file);
	char * blobCommit(Commit *c);
	
	Tests:

	kvp * key = createKeyVal("key","value");
	char * ch = kvts(key);
	//printf("%s\n",ch);
	kvp * key2 = stkv(ch);
	char * ch2 = kvts(key2);
	//printf("%s\n",ch2);
	freeKeyVal(key2);
	freeKeyVal(key);
	free(ch);
	free(ch2);
	Commit * c = initCommit();
	
	commitSet(c,"key1","value1");
	commitSet(c,"key2","value2");
	
	Commit * c2 = createCommit("hash");
	char * val = commitGet(c,"key2");
	char * val2 = commitGet(c,"key1");
	//printf("%s\n",val);
	//printf("%s\n",val2);
	commitSet(c2,"key3","value3");
	commitSet(c2,"key4","value4");
	char * comtostr= cts(c2);
	//printf("%s\n",comtostr);
	Commit * c3 = stc(comtostr);
	char * ctsc3 = cts(c3);
	//printf("%s\n",ctsc3);
	ctf(c3,"testex6.txt");
	Commit * c4 =  ftc("testex6.txt");
	char *ctsc4 = cts(c4);
	printf("%s\n",ctsc4);
	char * hashc4 = blobCommit(c4);
	freeCommit(c4);
	free(ctsc4);
	free(comtostr);
	freeCommit(c2);
	freeCommit(c);
	free(ctsc3);
	freeCommit(c3);
	free(hashc4);
